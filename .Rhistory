nxt()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_Colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo(flags)
viewinfo()
ls
ls()
dim(flags)
str(flags)
str(flags)
summary(flags)
names(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$country)
table(flags$countries)
names(flags)
table(flags$religion)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
mkdir("testdir")
mk.dir("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
files.list()
list.files()
file.exists("mytest.R")
?file.info
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
?file.copy
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
dir.create("testdir2", "testdir3", recursive=TRUE)
dir.create("testdir2/testdir3", recursive=TRUE)
?dir.
?dir
file.remove("testdir2")
unlink ("testdir2", recursive = TRUE)
setwd(old.dir)
unlink ("testdir", recursive = TRUE)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail(head, 15)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4, replace=TRUE)
sample(1:6,4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0:1, 100, prob=c(0.3, 0.7))
flips <- sample(0:1, 100, prob=c(0.3, 0.7), replace=TRUE)
flips <- sample(0:1, 100, replace= TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace= TRUE, prob=c(0.3, 0.7))
x<- 0:1
x
flips
sum(flips)
?rbinom
rbinom(1, 100, 0.7)
rbinom(100,100,0.7)
rbinom(1,size=1,prob=0.7)
rbinom(100,size=1,prob=0.7)
rbinom(n=100,size=1,prob=0.7)
flips2<- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100, sd=25)
rpois(5, mean=10)
?rpois
rpois(5, c(10))
rpois(5, 10
)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm <- olMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
swirl()
library(swirl)
rm(list=ls())
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSITXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
t3
class(t4)
Sys.time() > t1
Sys.time() - t1
diffTime(Sys.time(), t1, units='days')
difftime(Sys.time(), t1, units='days')
library(swirl)
swirl()
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$distance)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
?par
?plot
?par
?plot(cars, col = 2)
plot(cars, col = 2)
plot(cars, xlim=c(10,15))
plot(cars, pch = 2
)
data(mtcars)
hwad(mtcars)
head(mtcars)
str(mtcars)
summary(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
head(mtcars)
hist(mtcars$mpg)
?list
library(swirl)
swirl()
my_vecto <- 1:20
my_vector <- 1:20
my_vector
rm(my_vecto)
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, ncol=5)
my_matrix2 <- matrix(1:20, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","sean")
patients <- c("Bill","Gina","Kelly","Sean")
my_matrix
cbind(patients, my_matrix)
my_data
| <- data.frame(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
runif(c(2))
runif(c(5))
z <- 1:10
w <- lapply(z, mean)
w
z <- list(1:10, 1:5, c(1))
w <- lapply(z, mean)
w
w <- sapply(z, mean)
w
a <- matrix(1:6, ncol=3)
a
?sapply
?gl
gl(3, 2)
library(datasets)
data(iris)
?iris
head(iris)
summary(iris)
result <- tapply(iris, iris$Species, mean)
result <- split(iris, iris$Species)
result
sapply(result, mean)
sapply(result$virginica, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
lapply(result, mean)
lapply(result$virginica, mean)
library(mtcars)
library(datasets)
data(mtcars)
?mtcars
?mean
with(mtcars, tapply(mpg, cyl, mean))
levels(mtcars$cyl)
split(mtcars, cyl)
split(mtcars, mtcars$cyl)
mean($`8`$mpg)
x <- split(mtcars, mtcars$cyl)
x
x[3]
mean(x[3]$mpg)
z<-x[3]
z$mpg
mean(z$mpg)
class(z)
with(iris, tapply(Sepal.Length, Species, mean))
with(mtcars, tapply(hp, cyl, mean))
a <- with(mtcars, tapply(hp, cyl, mean))
a
a[1]
abs(a[3] - a[1])
abs(a[1] - a[3])
debug(ls)
ls()
exit
undebug(ls)
source('~/Dropbox/coursera/data-science/ProgrammingAssignment2/cachemean.R')
x
x <- makeVector(c(1,2,3))
x$get
x$get()
cachemean(x)
cachemean(x)
x$set(c(4,5,6))
cachemean(x)
cachemean(x)
y <- makeCacheMatrix (matrix(1:4, ncol = 2))
source('~/Dropbox/coursera/data-science/ProgrammingAssignment2/cachematrix.R')
y <- makeCacheMatrix (matrix(1:4, ncol = 2))
y$get()
cacheSolve(y)
z <- cacheSolve(y)
z
z %*% y
z %*% matrix(1:4, ncol =2)
cacheSolve(y)
y$set(matrix(1:9, ncol = 3))
cacheSolve(y)
y$set(matrix(1:16, ncol = 4))
cacheSolve(y)
y$get()
cacheSolve(y)
cacheSolve(y)
source('~/Dropbox/coursera/data-science/ProgrammingAssignment2/cachematrix.R')
size <- 1000
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
size <- 1000
source('~/Dropbox/coursera/data-science/ProgrammingAssignment2/cachematrix.R')
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
source('~/Dropbox/coursera/data-science/ProgrammingAssignment2/cachematrix.R')
size <- 1000
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
?abline
?hist
?boxplot
Lines <- readLines("~/Downloads/household_power_consumption.txt")
str(Lines)
head(Lines)
subL <- grep("^[1234567]/5/2007", substr(Lines, 1,8))
subL <- grep("^[12]/2/2007", substr(Lines, 1,8))
inSub <- read.table(text=Lines[subL,,], header = TRUE, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(subL)
?substr
head(Lines)
tail(subL)
nrows(subL)
length(subL)
inSub <- read.table(text=Lines[subL,], header = TRUE, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
str(subL)
?read.table
inSub <- read.table(text=Lines[subL], na.strings="?", header = TRUE, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
Lines[69517]
inSub <- read.table(text=Lines[subL,], sep=";",na.strings="?", header = TRUE, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
str(subL)
str(Lines)
inSub <- read.table(text=Lines[subL], sep=";",na.strings="?", header = TRUE, col.names = c("Date", "Time", "Global_active_power", "Global_reactive_power", "Voltage", "Global_intensity", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
head(inSub)
tail(insub)
tail(inSub)
getwd()
setwd("/Users/lukebarker/Dropbox/coursera/explo")
getwd()
setwd("/Users/lukebarker/Dropbox/coursera/explo/ExData_Plotting1/")
getwd()
source('~/Dropbox/coursera/explo/test.R')
source('~/Dropbox/coursera/explo/test.R')
source('~/Dropbox/coursera/explo/test.R')
source('~/Dropbox/coursera/explo/test.R')
tail(inSub)
inSub$FullDateTime <- paste(inSub$Date, inSub$Time)
head(inSub)
inSub$FullDateTime <- as.Date(inSub$FullDateTime, format = "%d/%m/%Y %H:%M:%S")
str(inSub)
head(inSub)
inSub$FullDateTime <- strptime(inSub$FullDateTime, format = "%d/%m/%Y %H:%M:%S")
head(inSub)
inSub$FullDateTime <- as.Date(inSub$FullDateTime, format = "%d/%m/%Y %H:%M:%S")
head(inSub)
inSub$FullDateTime <- paste(inSub$Date, inSub$Time)
inSub$FullDateTime <- strptime(inSub$FullDateTime, format = "%d/%m/%Y %H:%M:%S")
head(inSub)
tail(inSub)
str(inSub)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4,col="magenta")
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each
| Region")
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25 ~ region, data=pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution[region=="east"])
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
west <- subset(pollution, region=="west")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser Data")
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy('png',file="geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(car$speed), max(cars$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, data=airquality)
boxplot(Ozone ~ Month, data=airquality, xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
names(par())
?par
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality, month=5)
may <- subset(airquality, Month==5)
points( may$Wind, may$Ozone,col="blue", pch="2")
points( may$Wind, may$Ozone,col="blue", pch=17)
notmay <- subset(airquality, Month > 5)
notmay <- subset(airquality, Month != 5)
points( notmay$Wind, notmay$Ozone,col="red", pch=18)
points( notmay$Wind, notmay$Ozone,col="red", pch=8)
lines( notmay$Wind, notmay$Ozone,col="black")
legend("topright",pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Wind, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Wind, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1),oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext(outer=TRUE, "Ozone and Weather in New York City")
gwd
gwd()
pwd()
getwd()
